<main class="main-wrap">
    <section class="content-main">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Edit Product</h2>
                </div>
            </div>
            <div class="col-lg-12">
                <div class="card mb-4" style="background-color: #e6b3b3;">
                    <div class="card-body">
                        <form method="post" class="form-add-product" action="/admin/update-product/{{productData._id}}"
                              enctype="multipart/form-data" onsubmit="return Validation()">

                            <!-- Input for Product Name -->
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" value="{{productData.name}}" placeholder="Enter product name" name="name"
                                       class="form-control" id="productName">
                                <h6 class="alertAddProduct mt-1 text-danger" id="productNameAlert"></h6>
                            </div>

                            <!-- Input for Full Description -->
                            <div class="mb-4">
                                <label class="form-label">Full Description</label>
                                <textarea placeholder="Enter full description" name="description" id="longdescription"
                                          class="form-control" rows="3">{{productData.description}}</textarea>
                                <h6 class="alertAddProduct mt-1 text-danger" id="longAlert"></h6>
                            </div>

                            <div class="row">
                                <!-- Input for Price -->
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Price</label>
                                        <input placeholder="Enter price" type="text" value="{{productData.price}}" id="price"
                                               name="price" class="form-control">
                                        <h6 class="alertAddProduct mt-1 text-danger" id="priceAlert"></h6>
                                    </div>
                                </div>

                                <!-- Input for Stock Quantity -->
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Stock</label>
                                        <input name="stock" value="{{productData.stock}}" class="form-control"
                                               placeholder="Enter stock quantity" type="text" id="Qty">
                                        <h6 class="alertAddProduct mt-1 text-danger" id="qtyAlert"></h6>
                                    </div>
                                </div>

                                <!-- Dropdown for Category Selection -->
                                <div class="col-lg-4">
                                    <label class="form-label">Category</label>
                                    <select name="category" id="category" class="form-select">
                                        {{#each categories}}
                                        <option value="{{this._id}}">{{this.category}}</option>
                                        {{/each}}
                                    </select>
                                </div>
                            </div>

                            <!-- Product Images Section -->
                            <div class="form-group">
                                <label for="productImage">Product Images</label>
                                <div class="d-flex border p-10 m-tb-10">
                                    <input name="product-id" type="hidden" value="{{productData._id}}">
                                    {{#each productData.imageUrl}}
                                        <div class="image-container" data-image-index="{{@index}}">
                                            <div class="badge rounded-pill alert-danger">
                                                <p class="close-button" data-image-index="{{@index}}" onclick="deleteProImg({{@index}})" style="cursor: pointer;">Ã—</p>
                                            </div>
                                            <img src="/assets/imgs/products/{{this}}" alt="Product Image" style="width: 80px; height: auto;" class="m-2 pro-image" data-image-index="{{@index}}">
                                        </div>
                                    {{/each}}
                                     <input type="file" id="productImage" accept="image/*" class="form-control-file">
    <h6 id="imgAlert" class="mt-2 text-danger"></h6>
                                     <div id="cropContainer" style="display: none; margin-top: 10px;">
        <img id="cropImage" style="max-width: 100%;" />
        <button type="button" class="btn btn-success mt-2" id="cropButton">Crop & Upload</button>
    </div>
                                </div>
                                <input type="hidden" name="croppedImage" id="croppedImage">
                            </div>
                            
                            <!-- Action Buttons -->
                            <div class="d-flex g-2">
                                <div class="m-2">
                                    <button onclick="submitform(this.form)" class="btn btn-primary">Save</button>
                                </div>
                                <div class="m-2">
                                    <a href="/admin/product" type="button" class="btn btn-primary" id="backbutton">Back</a>
                                </div>
                            </div>

                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>
</main>
<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

<script>
document.addEventListener("DOMContentLoaded", function () {
    let cropper;
    const fileInput = document.getElementById("productImage");
    const cropImage = document.getElementById("cropImage");
    const cropContainer = document.getElementById("cropContainer");
    const croppedImageInput = document.getElementById("croppedImage");

    fileInput.addEventListener("change", function (event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                cropImage.src = e.target.result;
                cropContainer.style.display = "block";

                // Initialize cropper
                if (cropper) {
                    cropper.destroy();
                }
                cropper = new Cropper(cropImage, {
                    aspectRatio: 1, // Set aspect ratio (change if needed)
                    viewMode: 1
                });
            };
            reader.readAsDataURL(file);
        }
    });

    document.getElementById("cropButton").addEventListener("click", function () {
        if (cropper) {
            const canvas = cropper.getCroppedCanvas();
            canvas.toBlob(function (blob) {
                const reader = new FileReader();
                reader.onloadend = function () {
                    croppedImageInput.value = reader.result;
                };
                reader.readAsDataURL(blob);
            });

            Swal.fire("Success", "Image cropped successfully!", "success");
        }
    });
});
</script>


<script>
function Validation() {
    var errors = []; // Stores validation errors

    var fileInput = document.getElementById('productImage'); // File input element
    let productName = document.getElementById("productName").value;
    let longdescription = document.getElementById("longdescription").value;
    let Qty = document.getElementById("Qty").value;
    let price = document.getElementById("price").value;

    let productNameRegex = /^[a-zA-Z0-9\s\(\)\-\+]{4,}$/; // Product name validation (min 4 chars, alphanumeric & special chars allowed)
    let number = /^[0-9]\d*$/; // Number validation (only digits, no negative values)
     let descriptionRegex = /^(?!\s*$)[\s\S]{1,1000}$/;// Description validation (1-100 chars, no empty values)
    let priceRegex = /^(?!0(\.0+)?$)(\d+(\.\d{1,2})?)$/; // Price validation (positive number, up to 2 decimal places)

    let productNameAlert = document.getElementById("productNameAlert");
    let qtyAlert = document.getElementById("qtyAlert");
    let priceAlert = document.getElementById("priceAlert");
    let longAlert = document.getElementById("longAlert");
    let imgAlert = document.getElementById('imgAlert');

    // Clear previous error messages
    productNameAlert.innerHTML = "";
    qtyAlert.innerHTML = "";
    priceAlert.innerHTML = "";
    longAlert.innerHTML = "";
    imgAlert.innerHTML = "";

    // Validate product name
    if (!productName.match(productNameRegex)) {
        errors.push("Invalid Product Name");
    }

    // Validate quantity
    if (!Qty.match(number)) {
        errors.push("Invalid Quantity");
    }

    // Validate price
    if (!price.match(priceRegex)) {
        errors.push("Invalid Price");
    }

    // Validate description
    if (!longdescription.match(descriptionRegex)) {
        errors.push("Invalid Description");
    }

    // Validate uploaded images
    const validImageTypes = ['image/jpeg', 'image/png', 'image/gif']; // Allowed image formats
    const invalidFileTypes = ['application/pdf']; // Disallowed file types

    for (let i = 0; i < fileInput.files.length; i++) {
        const fileType = fileInput.files[i].type;
        
        if (invalidFileTypes.includes(fileType)) {
            errors.push("PDF files are not allowed.");
            break; // Stop checking if PDF is found
        } else if (!validImageTypes.includes(fileType)) {
            errors.push("Invalid file type. Only JPG, PNG, and GIF are allowed.");
            break;
        }
    }

    // Limit total images to 5
    const existingImagesCount = document.querySelectorAll('.pro-image').length;
    const newImagesCount = fileInput.files.length;
    const totalImagesCount = existingImagesCount + newImagesCount;

    if (totalImagesCount > 5) {
        errors.push("Maximum 5 images allowed.");
    }

    // Show errors if any
    if (errors.length > 0) {
        productNameAlert.innerHTML = errors.includes("Invalid Product Name") ? "Invalid Product Name" : "";
        qtyAlert.innerHTML = errors.includes("Invalid Quantity") ? "Invalid Quantity" : "";
        priceAlert.innerHTML = errors.includes("Invalid Price") ? "Invalid Price" : "";
        longAlert.innerHTML = errors.includes("Invalid Description") ? "Invalid Description" : "";
        imgAlert.innerHTML = errors.includes("PDF files are not allowed.") ? "PDF files are not allowed." : 
                             errors.includes("Invalid file type. Only JPG, PNG, and GIF are allowed.") ? "Invalid file type. Only JPG, PNG, and GIF are allowed." : 
                             errors.includes("Maximum 5 images allowed.") ? "Maximum 5 images allowed." : "";

        return false; // Prevent form submission
    }

    return true; // Allow form submission
}

const deleteImage = async (productId, imageIndex) => {
    try {
        const response = await fetch(`/admin/product-image-delete?id=${productId}&image=${imageIndex}`, {
            method: 'DELETE'
        });

        const data = await response.json();
        console.log("Response: ", data);

        if (data) {
            const imageElem = document.querySelector(`.pro-image[data-image-index="${imageIndex}"]`);
            const imageContainer = document.querySelector(`.image-container[data-image-index="${imageIndex}"]`);
            
            if (imageElem) {
                imageContainer.remove(); // Remove image from DOM
            } else {
                console.warn("Image element not found for index: ", imageIndex);
            }
        } else {
            console.warn("No response from server.");
        }

    } catch (error) {
        console.error("Error deleting image: ", error);
    }
};

const deleteProImg = () => {
    const deleteButtons = document.querySelectorAll('.close-button');
    const productId = document.getElementsByName('product-id')[0].value;
    console.log('Product ID: ', productId);
    
    deleteButtons.forEach((button) => {
        button.addEventListener('click', async (event) => {
            const imageIndex = event.target.dataset.imageIndex;
            await deleteImage(productId, imageIndex);
        });
    });
};

// Initialize delete functionality when page loads
document.addEventListener("DOMContentLoaded", deleteProImg);

</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<script>
    
    function submitform(form) {
    event.preventDefault();    

    // Perform validation before showing the confirmation popup
    if (!Validation()) {
        return; // Don't show confirmation if validation fails
    }

    // Show confirmation popup before saving changes
    Swal.fire({
        title: "Do you want to save the changes?",
        text: "Changes made will be saved.",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#088178",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, save it!",
        cancelButtonText: "No, cancel"
    }).then((result) => {
        if (result.isConfirmed) {
            // Show success message after confirming save
            Swal.fire({
                title: "Saved",
                text: "Your changes have been saved.",
                icon: "success",
                confirmButtonText: "OK"
            }).then(() => {
                form.submit(); // Submit the form after confirmation
            });
        } else {
            console.log("User canceled the action");
        }
    }); 
}

    $(document).ready(function () {
        $('#backbutton').click(function (e) {
            e.preventDefault();

            // Show confirmation popup before navigating away
            Swal.fire({
                title: "Leave the page?",
                text: "Unsaved data will be lost.",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#088178",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes"
            }).then((result) => {
                if (result.isConfirmed) {
                    // Redirect to the product page if confirmed
                    window.location.href = "/admin/product";
                }
            });
        });
    });

</script>
