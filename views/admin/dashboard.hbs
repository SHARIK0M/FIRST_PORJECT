<head>
    <script src="https://cdn.jsdelivr.net/npm/handlebars/dist/handlebars.min.js"></script>
</head>

<main class="main-wrap">   
    <section class="content-main">
        <!-- Dashboard Header -->
        <div class="content-header">
            <div>
                <h2 class="content-title card-title">Dashboard</h2>
                <p>Overview of your business data</p>
            </div>
        </div>
        
        <!-- Summary Cards -->
       <div class="row">
    <!-- Total Revenue -->
    <div class="col-lg-3 col-md-6">
        <div class="card shadow-sm border-0 rounded-lg mb-4">
            <div class="card-body d-flex align-items-center">
                <div class="icon icon-sm rounded-circle bg-primary-light d-flex align-items-center justify-content-center me-3">
                    <i class="text-primary material-icons md-monetization_on"></i>
                </div>
                <div class="text">
                    <h6 class="mb-1 text-muted">Total Revenue</h6>
                    <h5 class="fw-bold text-dark">₹{{totalRevnue}}</h5>
                </div>
            </div>
        </div>
    </div>

    <!-- Total Orders -->
    <div class="col-lg-3 col-md-6">
        <div class="card shadow-sm border-0 rounded-lg mb-4">
            <div class="card-body d-flex align-items-center">
                <div class="icon icon-sm rounded-circle bg-success-light d-flex align-items-center justify-content-center me-3">
                    <i class="text-success material-icons md-local_shipping"></i>
                </div>
                <div class="text">
                    <h6 class="mb-1 text-muted">Total Orders</h6>
                    <h5 class="fw-bold text-dark">{{thisMonthOrder}}</h5>
                </div>
            </div>
        </div>
    </div>

    <!-- This Month Sales -->
    <div class="col-lg-3 col-md-6">
        <div class="card shadow-sm border-0 rounded-lg mb-4">
            <div class="card-body d-flex align-items-center">
                <div class="icon icon-sm rounded-circle bg-warning-light d-flex align-items-center justify-content-center me-3">
                    <i class="text-warning material-icons md-qr_code"></i>
                </div>
                <div class="text">
                    <h6 class="mb-1 text-muted">This Month Sales</h6>
                    <h5 class="fw-bold text-dark">{{thisMonthOrder}}</h5>
                </div>
            </div>
        </div>
    </div>

    <!-- Monthly Earning -->
    <div class="col-lg-3 col-md-6">
        <div class="card shadow-sm border-0 rounded-lg mb-4">
            <div class="card-body d-flex align-items-center">
                <div class="icon icon-sm rounded-circle bg-info-light d-flex align-items-center justify-content-center me-3">
                    <i class="text-info material-icons md-shopping_basket"></i>
                </div>
                <div class="text">
                    <h6 class="mb-1 text-muted">Monthly Earning</h6>
                    <h5 class="fw-bold text-dark">₹{{thisMonthSales}}</h5>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
                <div class="col-xl-4 col-lg-12">
                    <div class="card mb-4">
                        <article class="card-body">
                            <h5 class="card-title">Sale statistics</h5>
                            <canvas id="myChart1" height="300px"></canvas>
                        </article>
                    </div>

                </div>
                <div class="col-xl-4 col-lg-12">
                    <div class="card mb-4">
                        <article class="card-body">
                            <h5 class="card-title">Revenue</h5>
                            <canvas id="myChar" height="300px"></canvas>
                        </article>
                    </div>
                </div>
                <div class="col-xl-4 col-lg-12">
                    <div class="card mb-4">
                        <article class="card-body">
                            <h5 class="card-title">Category Revenue</h5>
                            <canvas id="revenueChart" height="120px"></canvas>
                        </article>
                    </div>

                </div>
            </div>
     
        <!-- Sales Report Filter -->
        <div class="container mt-3 mb-4">
    <div class="row align-items-end">
        <!-- Date Range Selection -->
        <div class="col-md-3">
            <label for="date-range" class="form-label">Select Range:</label>
            <select class="form-control" id="date-range" onchange="toggleDateInputs()">
                <option value="select">Select</option>
                <option value="daily">Daily</option>
                <option value="weekly">Weekly</option>
                <option value="monthly">Monthly</option>
                <option value="custom">Custom</option>
            </select>
        </div>

        <!-- Start Date Input -->
        <div class="col-md-3 d-none" id="start-date-group">
            <label for="start-date" class="form-label">Start Date:</label>
            <input type="date" class="form-control" value="2024-07-12" id="start-date" min="" max="">
        </div>

        <!-- End Date Input -->
        <div class="col-md-3 d-none" id="end-date-group">
            <label for="end-date" class="form-label">End Date:</label>
            <input type="date" class="form-control" value="2024-07-18" id="end-date" min="" max="">
        </div>

        <!-- Generate Report Button -->
        <div class="col-md-3 text-md-start text-center mt-2 mt-md-0">
            <button onclick="getSalesData()" type="button" class="btn btn-primary">
                <i class="material-icons md-post_add"></i> Create Report
            </button>
        </div>
    </div>

    <!-- Hidden Input for Revenue -->
    <input id="revenue" type="hidden" value="{{revenueByMonth}}">
</div>


        <div class="row" id="table"></div>

        <!-- Best Selling and Popular Products Section -->
        <div class="row">
            <div class="col-lg-4">
                <div class="card mb-4">
                    <header class="card-header">
                        <h5>Best Selling Products</h5>
                    </header>
                    <div class="card-body">
                        {{#each bestSellings}}
                        <article class="itemlist">
                            <div class="row align-items-center">
                                <div class="col-lg-4 col-sm-4 col-8 flex-grow-1 col-name">
                                    <a class="itemside" href="#">
                                        <div class="left">
                                            <img src="/assets/imgs/products/{{imageUrl.[0]}}" class="img-sm img-thumbnail" alt="Item">
                                        </div>
                                        <div class="info">
                                            <h6 class="mb-0">{{name}}</h6>
                                        </div>
                                    </a>
                                </div>
                            </div>
                        </article>
                        {{/each}}
                    </div>
                </div>
            </div>
              
            <div class="col-lg-4">
                <div class="card mb-4">
                    <header class="card-header">
                        <h5>Popular Products</h5>
                    </header>
                    <div class="card-body">
                        {{#each popuarProducts}}
                        <article class="itemlist">
                            <div class="row align-items-center">
                                <div class="col-lg-4 col-sm-4 col-8 flex-grow-1 col-name">
                                    <a class="itemside" href="#">
                                        <div class="left">
                                            <img src="/assets/imgs/products/{{imageUrl.[0]}}" class="img-sm img-thumbnail" alt="Item">
                                        </div>
                                        <div class="info">
                                            <h6 class="mb-0">{{name}}</h6>
                                        </div>
                                    </a>
                                </div>
                            </div>
                        </article>
                        {{/each}}
                    </div>
                </div>
            </div>
            
            <div class="col-lg-4">
                <div class="card mb-4">
                    <header class="card-header">
                        <h5>Best Selling Categories</h5>
                    </header>
                    <div class="card-body">
                        {{#each bestSellingCategory}}
                        <article class="itemlist">
                            <div class="row align-items-center">
                                <div class="col-lg-4 col-sm-4 col-8 flex-grow-1 col-name">
                                    <a class="itemside" href="#">
                                        <div class="left">
                                            <img src="/assets/imgs/products/{{imageUrl}}" class="img-sm img-thumbnail" alt="Item">
                                        </div>
                                        <div class="info">
                                            <h6 class="mb-0">{{category}}</h6>
                                        </div>
                                    </a>
                                </div>
                            </div>
                        </article>
                        {{/each}}
                    </div>
                </div>
            </div>
        </div>
    </section>
</main>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="/javascripts/chart.js"></script>

<script>
    let months, ordersByMonth, revenueByMonth, categories, revenues;


    // Fetch chart data from the server and update graphs
    const getChartData = async () => {
        try {
            const response = await fetch('/admin/get_chart_data', {
                headers: { 'Content-Type': 'application/json' },
            });
            
            const data = await response.json();
            console.log('Data received:', data);

            // Assigning received data to variables
            months = data.months;
            ordersByMonth = data.odersByMonth; // Fix potential typo
            revenueByMonth = data.revnueByMonth; // Fix potential typo
            categories = data.cat;
            revenues = data.revenue;

            // Updating graphs with fetched data
            salesGraph(months, ordersByMonth);
            revenue(months, revenueByMonth);
            categoryRevenue(categories, revenues);
        } catch (error) {
            console.error('Error fetching or processing data:', error);
        }
    };

    getChartData();
    

function categoryRevenue(categories, revenues) {
    console.log("Categories:", categories);
    console.log("Revenues:", revenues);

    const ctx = document.getElementById('revenueChart').getContext('2d');
    new Chart(ctx, {
        type: 'pie',
        data: {
            labels: categories,
            datasets: [{
                label: 'Revenue by Category',
                data: revenues,
                backgroundColor: [
                    'rgba(0, 123, 255, 0.6)',   // Blue
                    'rgba(40, 167, 69, 0.6)',   // Green
                    'rgba(255, 193, 7, 0.6)',   // Yellow
                    'rgba(220, 53, 69, 0.6)',   // Red
                    'rgba(108, 117, 125, 0.6)', // Gray
                    'rgba(23, 162, 184, 0.6)'   // Cyan
                ],
                borderColor: [
                    'rgba(0, 123, 255, 1)',
                    'rgba(40, 167, 69, 1)',
                    'rgba(255, 193, 7, 1)',
                    'rgba(220, 53, 69, 1)',
                    'rgba(108, 117, 125, 1)',
                    'rgba(23, 162, 184, 1)'
                ],
                borderWidth: 2
            }]
        },
        options: {
            plugins: {
                datalabels: {
                    color: '#fff', // White text for contrast
                    font: {
                        size: 14,
                        weight: 'bold'
                    },
                    formatter: (value, context) => {
                        return `${context.chart.data.labels[context.dataIndex]}: ${value}`;
                    },
                    anchor: 'end',
                    align: 'start',
                    offset: 10
                }
            }
        }
    });
}
   function salesGraph(months, ordersByMonth) {
    const ctx = document.getElementById('myChart1').getContext('2d');
    new Chart(ctx, {
        type: 'bar',
        data: {
            labels: months,
            datasets: [{
                label: '# of Sales',
                data: ordersByMonth,
                backgroundColor: [
                    'rgba(30, 144, 255, 0.6)',  // DodgerBlue
                    'rgba(50, 205, 50, 0.6)',   // LimeGreen
                    'rgba(255, 140, 0, 0.6)',   // DarkOrange
                    'rgba(220, 20, 60, 0.6)',   // Crimson
                    'rgba(138, 43, 226, 0.6)',  // BlueViolet
                    'rgba(255, 215, 0, 0.6)',   // Gold
                    'rgba(30, 144, 255, 0.6)',  // DodgerBlue
                    'rgba(50, 205, 50, 0.6)',   // LimeGreen
                    'rgba(255, 140, 0, 0.6)',   // DarkOrange
                    'rgba(220, 20, 60, 0.6)',   // Crimson
                    'rgba(138, 43, 226, 0.6)',  // BlueViolet
                    'rgba(255, 215, 0, 0.6)'    // Gold
                ],
                borderColor: [
                    'rgba(30, 144, 255, 1)',
                    'rgba(50, 205, 50, 1)',
                    'rgba(255, 140, 0, 1)',
                    'rgba(220, 20, 60, 1)',
                    'rgba(138, 43, 226, 1)',
                    'rgba(255, 215, 0, 1)',
                    'rgba(30, 144, 255, 1)',
                    'rgba(50, 205, 50, 1)',
                    'rgba(255, 140, 0, 1)',
                    'rgba(220, 20, 60, 1)',
                    'rgba(138, 43, 226, 1)',
                    'rgba(255, 215, 0, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                },
                tooltip: {
                    callbacks: {
                        label: function(tooltipItem) {
                            return tooltipItem.label + ': ' + tooltipItem.raw + ' sales';
                        }
                    }
                }
            }
        }
    });
}
function revenue(months, revenueByMonth) {
    const ctx1 = document.getElementById('myChar').getContext('2d');
    new Chart(ctx1, {
        type: 'bar',
        data: {
            labels: months,
            datasets: [
                {
                    label: 'Revenue (Bar)',
                    data: revenueByMonth,
                    backgroundColor: 'rgba(255, 99, 132, 0.6)',
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderWidth: 1,
                    yAxisID: 'yBar',
                    order: 2
                },
                {
                    label: 'Revenue (Line)',
                    data: revenueByMonth,
                    borderColor: 'rgba(54, 162, 235, 1)',
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    borderWidth: 3,
                    type: 'line',
                    pointRadius: 6,
                    pointBackgroundColor: 'rgba(54, 162, 235, 1)',
                    tension: 0.3,  // Smooth curve effect
                    yAxisID: 'yLine',
                    order: 1
                }
            ]
        },
        options: {
            scales: {
                yBar: {
                    beginAtZero: true,
                    position: 'left',
                    grid: {
                        drawBorder: false
                    },
                    title: {
                        display: true,
                        text: 'Revenue (Bar)',
                        color: '#ff6384'
                    }
                },
                yLine: {
                    beginAtZero: true,
                    position: 'right',
                    grid: {
                        drawOnChartArea: false // Prevents grid overlap
                    },
                    title: {
                        display: true,
                        text: 'Revenue (Line)',
                        color: '#36a2eb'
                    }
                },
                x: {
                    grid: {
                        drawBorder: false
                    }
                }
            },
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                },
                tooltip: {
                    callbacks: {
                        label: function(tooltipItem) {
                            return tooltipItem.dataset.label + ': ' + tooltipItem.raw + ' revenue';
                        }
                    }
                }
            }
        }
    });
}



    // Toggle date input fields based on the selected range
    function toggleDateInputs() {
        const dateRange = document.getElementById("date-range").value;
        const startDateGroup = document.getElementById("start-date-group");
        const endDateGroup = document.getElementById("end-date-group");
        const startDateInput = document.getElementById("start-date");
        const endDateInput = document.getElementById("end-date");

        const today = new Date().toISOString().split('T')[0];

        switch (dateRange) {
            case "daily":
                startDateInput.value = endDateInput.value = today;
                break;
            case "weekly":
                const lastWeek = new Date();
                lastWeek.setDate(lastWeek.getDate() - 6);
                startDateInput.value = lastWeek.toISOString().split('T')[0];
                endDateInput.value = today;
                break;
            case "monthly":
                const lastMonth = new Date();
                lastMonth.setDate(lastMonth.getDate() - 30);
                startDateInput.value = lastMonth.toISOString().split('T')[0];
                endDateInput.value = today;
                break;
            case "custom":
                startDateInput.value = endDateInput.value = "";
                break;
            default:
                startDateInput.value = endDateInput.value = "";
                break;
        }

        // Show or hide date input fields based on the selected range
       const isCustom = dateRange === "custom";
startDateGroup.classList.toggle("d-none", !isCustom);
endDateGroup.classList.toggle("d-none", !isCustom);

    }

</script>