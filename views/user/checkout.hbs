<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
</head>

 <main class="main">
        <!-- Breadcrumb Navigation -->
        <div class="page-header breadcrumb-wrap">
            <div class="container">
                <div class="breadcrumb">
                    <a href="/" rel="nofollow">Home</a>
                    <span></span> Shop
                    <span></span> Checkout
                </div>
            </div>
        </div>
        
        <section class="checkout-section mt-50 mb-50">
            <div class="container">              
                <div class="row">
                    <!-- Order Review Section -->
                    <div class="col-md-8">
                        <div class="order-review">
                            <h4>Your Orders</h4>
                            <div class="table-responsive order-table text-center">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th colspan="2">Product</th>
                                            <th>Total</th>
                                        </tr>
                                    </thead>
                                     <tbody>
                                        {{#each cart}}
                                        <tr>
                                            <td class="image product-thumbnail"><img src="/assets/imgs/products/{{productImage.[0]}}" alt="#"></td>
                                            <td>
                                                <h5><a href="shop-product-full.html">{{this.productName}}</a></h5> <span class="product-qty">{{this.productPrice}}x {{this.quantity}}</span>
                                            </td>
                                            <td>₹{{multiply this.productPrice this.quantity }}
                                                <input  id= "productStock" value="{{this.productStock}}" hidden/>
                                                <input  id= "productQuantity" value="{{this.quantity}}" hidden/>

                                            </td>
                                            
                                        </tr>
                                        
                                        {{/each}}
                                        <tr>
                                        <th> Coupon <span id="copoun_code">
                                                <small></small>
                                            </span></th>
                                        <td colspan="2"><em><span id="discount_amt">
                                                    <span class="text-success">No Coupon</span>
                                                </span></em></td>
                                    </tr>
                                        <tr>
                                        <th>Total</th>
                                        <td class="product-subtotal" colspan="2">₹{{subTotal}}</td>
                                    </tr>
                                        <tr>
                                            <th>Shipping</th>
                                            <td colspan="2"><em>₹50</em></td>
                                        </tr>
                                        <tr>
                                            <th>Grand Total</th>
                                            {{!-- <td colspan="2" class="product-subtotal"><span class="font-xl text-brand fw-900">$280.00</span></td> --}}
                                            <td colspan="2" class="product-subtotal"><span id="new_sub_total"><span
                                                    class="font-xl text-brand fw-900" id="total">₹{{add subTotal
                                                    50}}</span></span></td>
                                                    <input type="hidden" name="subTotal" value="{{  subTotal  }}" id="subTotal">
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                              <div class="mb-30 mt-50">
                            <div class="heading_s1 mb-3">
                                <h4>Apply Coupon</h4>
                            </div>
                            <div class="total-amount">
                                <div class="left">
                                    <div class="coupon">
                                        <form action="#" target="_blank">
                                            <div class="form-row row justify-content-center">
                                                <div class="form-group col-lg-6">
                                                    <input class="font-medium" id="copon" name="coupon"
                                                        placeholder="Enter Your Coupon">
                                                </div>
                                                <div class="form-group col-lg-6">
                                                    <button id="couponBtn" onclick="toggleCoupon()" type="button"
                                                        class="btn btn-sm">
                                                        <i class="fi-rs-label mr-10"></i>Apply
                                                    </button>


                                                </div>
                                                <div class="text-center m-2" style="color: red;" id="couponMsg"> </div>
                                                <p class="text-center m-2" style="color: green;" id="sCoponMsg"> </p>

                                            </div>

                                        </form>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-4">

                                <button type="button" class="btn btn-fill-out btn-block " data-bs-toggle="collapse" data-bs-target="#couponList" aria-expanded="false" aria-controls="couponList"> <i class="fi-rs-label mr-10"></i> Show Available Coupons</button>

                                <div class="panel-collapse1 collapse coupon_form " id="couponList">
                                    <div class="panel-body">
                                        {{!-- <div class="mb-25">
                                            <h4>Address Form</h4>
                                        </div> --}}
                                        {{#each coupon}}
                                        <article class="itemlist">
                                            <div class="row align-items-center">
                                                {{!-- <div class="col col-check flex-grow-0">
                                                    <div class="form-check">
                                                        <input class="form-check-input" type="checkbox" value="">
                                                    </div>
                                                </div> --}}

                                                <div
                                                    class="col-lg-2 col-sm-2 col-2 flex-grow-1 col-name text-align-center">
                                                    <a class="itemside">

                                                        <div class="info">
                                                            <h6 class="mb-2">{{this.code}}</h6>
                                                        </div>
                                                    </a>
                                                </div>
                                                <div
                                                    class="col-lg-2 col-sm-2 col-2 flex-grow-1 col-name text-align-center">
                                                    <a class="itemside">

                                                        <div class="info">
                                                            <h6 class="mb-0">{{this.discount}}%</h6>
                                                        </div>
                                                    </a>
                                                </div>
                                                {{!-- <div class="col-lg-2 col-sm-2 col-4 col-price">
                                                    <span>$76.99</span>
                                                </div> --}}






                                            </div> <!-- row .// -->
                                        </article>
                                        {{/each}}
                                    </div>
                                </div>
                            </div>
                        </div>

                            <!-- Payment Method Section -->
                            <div class="payment-method">
                                <h5 class="mb-3">Payment</h5>
                                <div class="payment-option">
                                    <input class="form-check-input" required type="radio" name="payment_option" id="cash-on-delivery" value="cash-on-delivery">
                                    <label for="cash-on-delivery">Cash On Delivery</label>
                                </div>
                            </div>
                            
                            <!-- Order Button -->
                            <div id="order_button" >
                                <button onclick="placeOrder()" class="btn-shopping mt-2">Place Order</button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Address Selection Section -->
                    <div class="col-md-4">
                        <div class="address-selection mb-4">
                            <select id="selectedAddress" class="form-select ">
                                {{#each addressData}}
                                <option value="{{this._id}}">{{this.city}}</option>
                                {{/each}}
                            </select>
                        </div>
                        
                        <!-- Add New Address Button -->
                        <div class="add-address">
                            <button type="button" class="btn-shopping mt-2" data-bs-toggle="collapse" data-bs-target="#coupon">Add new Address</button>
                        </div>
                        
                        <!-- Address Form -->
                        <div class="panel-collapse collapse coupon_form" id="coupon">
                            <div class="panel-body">
                                <h4>Address Form</h4>
                                <form action="/checkout/address/check" method="post">
                                    <div class="form-group">
                                        <label>Name</label>
                                        <input type="text" class="form-control" name="name" id="name" placeholder="Enter your name">
                                        <p id="nameError" class="error-text"></p>
                                    </div>
                                    <div class="form-group">
                                        <label>Phone</label>
                                        <input type="tel" class="form-control" name="mobile" id="mobile" placeholder="Enter your phone number">
                                        <p id="mobileError" class="error-text"></p>
                                    </div>
                                    <div class="form-group">
                                        <label>Address</label>
                                        <input type="text" class="form-control" name="address1" id="address1" placeholder="Enter your address">
                                        <p id="address1Error" class="error-text"></p>
                                    </div>
                                    <div class="form-group">
                                        <label>City</label>
                                        <input type="text" class="form-control" name="city" id="city" placeholder="Enter your City">
                                        <p id="cityError" class="error-text"></p>
                                    </div>
                                    <div class="form-group">
                                        <label>State</label>
                                        <input type="text" class="form-control" name="state" id="state" placeholder="Enter your State">
                                        <p id="stateError" class="error-text"></p>
                                    </div>
                                    <div class="form-group">
                                        <label>Pincode</label>
                                        <input type="tel" class="form-control" name="pin" id="pincode" placeholder="Enter your Pincode">
                                        <p id="pincodeError" class="error-text"></p>
                                    </div>
                                    <button class="btn btn-primary" type="submit">Save Address</button>
                                    <button type="button" class="btn btn-secondary" data-bs-toggle="collapse" data-bs-target="#coupon">Close</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
</main>

 <style>
        .btn-shopping {
            background: #ff6f61;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            border: none;
            cursor: pointer;
        }
        .btn-shopping:hover {
            background: #e63946;
        }
    </style>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">

   
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<script>

    let couponData; // Stores coupon-related data
    let couponEl; // Reference to coupon element
    let newTotal; // Stores the new total after applying coupon
    let subTotal; // Stores the subtotal amount
    let updateWallet; // Handles wallet updates
    let ct = 0; // Counter variable


  let originalSubTotal = Number(document.getElementsByName('subTotal')[0].value) ;

    const toggleCoupon = async () => {
        
        ct+=1
        couponEl = document.getElementById('copon').value.trim();
        const currentStatus = document.getElementById('couponBtn').innerText.trim();
        const endpoint = currentStatus === 'Apply' ? '/apply_coupon' : '/remove_coupon';

        const response = await fetch(endpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ couponVal: couponEl, subTotal: originalSubTotal })
        });

         couponData = await response.json();

         console.log(couponData)

        const setCouponStatus = (msg, element) => {
            element.innerHTML = `<p>${msg}</p>`;
            setTimeout(() => {
                element.style.opacity = 1;
                element.innerHTML = '';
            }, 2000);
        };

        const couponMsg = document.getElementById('couponMsg');
        const sCoponMsg = document.getElementById('sCoponMsg');

        if (couponData.status === 'invalid') {
            ct=0
            setCouponStatus('Invalid coupon', couponMsg);
        } else if (couponData.status === 'expired') {
            ct=0
            setCouponStatus('Coupon has expired!', couponMsg);
        } else if (couponData.status === 'already_used') {
            ct=0
            setCouponStatus('Coupon already used!', couponMsg);
        } else if (couponData.status === 'not_used') {
            ct=0
            setCouponStatus('Coupon not used yet!', couponMsg);
        } else if (couponData.status === 'min_purchase_not_met') {
        ct = 0;
        setCouponStatus('Minimum purchase not met!', couponMsg);
        }else if (couponData.status === 'removed') {
            setCouponStatus('Coupon removed successfully', couponMsg);
            document.getElementById('couponBtn').innerHTML = '<i class="fi-rs-label mr-10"></i>Apply';
            document.getElementById('copon').value = '';
        } else if (couponData.status === 'applied') {
            setCouponStatus('Coupon applied successfully', sCoponMsg);
            document.getElementById('couponBtn').innerHTML = '<i class="fi-rs-label mr-10"></i>Remove';
        }
   

        if (couponData.status === 'applied' || couponData.status === 'removed') {
            document.getElementById('new_sub_total').innerHTML = `<strong>${parseInt(couponData.newTotal) + 50}</strong>`;
            document.getElementsByName('subTotal')[0].value = couponData.newTotal + 50;
            document.getElementById('copoun_code').innerHTML = `<small>${couponEl}</small>`;
            document.getElementById('discount_amt').innerHTML = `<span class="text-success">${couponData.discountAmt}</span>`;
        }
    };


   

const validateCoupon = async () => {
    couponEl = document.getElementById('copon').value;
    subTotal = Number(document.getElementsByName('subTotal')[0].value);

    console.log(couponEl);
    console.log('heloooo from validate coupon...............');
    const response = await fetch('/validate_coupon', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            couponVal: couponEl,
            subTotal: subTotal
        })
    });

    console.log('hiiiii from coupon status........;;;;;;');
    couponData = await response.json();
    console.log(couponData);

    
};

    // Select all payment option radio buttons
    const paymentOption = document.querySelectorAll('input[name="payment_option"]');
    let paymentMethod = null; // Stores selected payment method

    // Listen for changes in payment option selection
    paymentOption.forEach((checkbox) => {
        checkbox.addEventListener('change', () => {
            if (checkbox.checked) {
                paymentMethod = checkbox.value; // Update selected payment method
                console.log("User selected " + checkbox.value);
                console.log(paymentMethod, 'payment method selected');
            } else {
                console.log("User unchecked " + checkbox.value);
            }
        });
    });

    // Function to handle placing an order
    const placeOrder = () => {
        const selectedAddress = document.getElementById('selectedAddress').value;
        if (!selectedAddress) {
            Swal.fire('Error', 'Please select a delivery address.', 'error');
            return;
        }
        
        // Confirmation alert before placing an order
        Swal.fire({
            title: 'Confirm Order',
            text: "Are you sure you want to place the order?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, place it!'
        }).then((result) => {
            if (result.isConfirmed) {
                subTotal = Number(document.getElementsByName('subTotal')[0].value);
                if (paymentMethod) {
                    Cod(); // Proceed with Cash on Delivery payment process
                } else {
                    console.log('Invalid payment method');
                }
            }
        });
    };

    let paymentStatus = true; // Tracks the payment status

    // Function to process Cash on Delivery order
    const Cod = async () => {
        try {
            const selectAddress = document.querySelector('#selectedAddress').value;
            const subTotal = Number(document.getElementsByName('subTotal')[0].value);

            let requestBody = {
                selectedAddress: selectAddress,
                selectedPayment: paymentMethod,
                amount: subTotal,
            };
            
            if (!paymentStatus) {
                console.log('Payment failed');
                requestBody.status = "Payment Failed";
            }

            const response = await fetch('/checkout/place-order', {
                method: 'POST',
                headers: {
                    'Content-Type': "application/json",
                },
                body: JSON.stringify(requestBody),            
            });

            const placeOrderData = await response.json(); // Parse response JSON

            if (placeOrderData) {
                console.log('Received order data:', placeOrderData);
                if (paymentStatus) {            
                    window.location.href = '/checkout/success'; // Redirect to order confirmation page
                } else {
                    // Show alert and redirect on payment failure
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Failed',
                        text: 'Your order could not be processed. Please try again later or use a different payment method.',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = '/checkout/payment-failed';
                        }
                    });
                }
            }
        } catch (error) {
            console.error('Error placing order:', error);
            // Handle error (e.g., show notification to user)
        }
    };

</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Get form and input fields
        const form = document.querySelector('form[action="/checkout/address/check"]'); 
        const nameField = document.getElementById('name');
        const mobileField = document.getElementById('mobile');
        const address1Field = document.getElementById('address1');
        const cityField = document.getElementById('city');
        const stateField = document.getElementById('state');
        const pincodeField = document.getElementById('pincode');

        // Get error message elements
        const nameError = document.getElementById('nameError');
        const mobileError = document.getElementById('mobileError');
        const address1Error = document.getElementById('address1Error');
        const cityError = document.getElementById('cityError');
        const stateError = document.getElementById('stateError');
        const pincodeError = document.getElementById('pincodeError');

        // Validate form on submit
        form.addEventListener('submit', function (event) {
            let isValid = true;
            clearErrors(); // Remove previous error messages

            // Validate name field
            if (!validateText(nameField, nameError, 'Name is required.')) {
                isValid = false;
            }

            // Validate mobile number (must be 10 digits)
            if (!validateMobile(mobileField, mobileError)) {
                isValid = false;
            }

            // Validate address line 1
            if (!validateText(address1Field, address1Error, 'Address line 1 is required.')) {
                isValid = false;
            }

            // Validate city field
            if (!validateText(cityField, cityError, 'City is required.')) {
                isValid = false;
            }

            // Validate state field
            if (!validateText(stateField, stateError, 'State is required.')) {
                isValid = false;
            }

            // Validate pincode (must be 6 digits)
            if (!validatePincode(pincodeField, pincodeError)) {
                isValid = false;
            }

            // Prevent form submission if validation fails
            if (!isValid) {
                event.preventDefault();
            }
        });

        // Function to validate text fields (name, city, state, address)
        function validateText(inputField, errorField, errorMessage) {
            if (inputField.value.trim() === '') {
                showError(errorField, errorMessage);
                return false;
            }
            return true;
        }

        // Function to validate mobile number (10 digits)
        function validateMobile(inputField, errorField) {
            const mobilePattern = /^\d{10}$/;
            if (inputField.value.trim() === '') {
                showError(errorField, 'Phone number is required.');
                return false;
            } else if (!mobilePattern.test(inputField.value.trim())) {
                showError(errorField, 'Phone number must be 10 digits.');
                return false;
            }
            return true;
        }

        // Function to validate pincode (6 digits)
        function validatePincode(inputField, errorField) {
            const pincodePattern = /^\d{6}$/;
            if (inputField.value.trim() === '') {
                showError(errorField, 'Pincode is required.');
                return false;
            } else if (!pincodePattern.test(inputField.value.trim())) {
                showError(errorField, 'Pincode must be 6 digits.');
                return false;
            }
            return true;
        }

        // Function to display error message
        function showError(element, message) {
            element.innerText = message;
            element.style.color = 'red';
        }

        // Function to clear all error messages dynamically
        function clearErrors() {
            document.querySelectorAll('.error-text').forEach(error => {
                error.innerText = '';
            });
        }

        // Event listeners to clear error messages on input
        [nameField, mobileField, address1Field, cityField, stateField, pincodeField].forEach(field => {
            field.addEventListener('input', function () {
                document.getElementById(field.id + 'Error').innerText = '';
            });
        });
    });
</script>


<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    